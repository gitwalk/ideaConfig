<application>
  <component name="AppStorage">
    <histories>
      <item value="optimizer" />
      <item value="Dispatcher to call for each op encountered" />
      <item value="Constructor with keeping all the ancestors in the operator stack during * dispatching." />
      <item value="for a lineage generator with operator tree, 2 levels of current node's * ancestors need to keep in the operator stack." />
      <item value="Each node will be accessed once while it could be dispatched multiple times" />
      <item value="that the node will only get dispatched after all the parents are dispatched" />
      <item value="Starting from the startNodes, add the children whose parents have been // included in the list." />
      <item value="starting point for walking" />
      <item value="Create a list of topop nodes" />
      <item value="The dispatcher fires the processor corresponding to the closest matching rule and passes the context along" />
      <item value="Create the lineage context" />
      <item value="Perform Logical optimization" />
      <item value="Generate table access stats if required" />
      <item value="Take care of view creation" />
      <item value="Set the mapjoin hint if it needs to be disabled" />
      <item value="Set the semijoin hints in parse context" />
      <item value="Generate" />
      <item value="Generate Parse Context for Optimizer &amp; Physical compiler" />
      <item value="Deduce" />
      <item value="Deduce Resultset Schema" />
      <item value="the table needs to be masked or filtered" />
      <item value="We walk through the AST" />
      <item value="Here we rewrite the * and also the masking table" />
      <item value="Gen OP Tree from resolved Parse Tree" />
      <item value="Materialization" />
      <item value="Materialization is allowed if it is not a view definition" />
      <item value="Resolve Parse Tree" />
      <item value="masking and filtering should be created here" />
      <item value="step processPositionAlias out of genResolvedParseTree" />
      <item value="if cbo is enabled, orderby position will be processed in genPlan" />
      <item value="replace each of the position alias in ORDERBY with the actual column name" />
      <item value="Process the position alias in GROUPBY and ORDERBY" />
      <item value="position" />
      <item value="location" />
      <item value="change the location of position alias process here" />
      <item value="Resolved" />
      <item value="Generate Resolved Parse tree from syntax tree" />
      <item value="Do semantic analysis and plan generation" />
      <item value="// Record current valid txn list that will be used throughout the query // compilation and processing. We only do this if 1) a transaction // was already opened and 2) the list has not been recorded yet, // e.g., by an explicit open transaction command." />
      <item value="Determines transaction type based on query AST" />
      <item value="also sets the hive operation in query state" />
      <item value="SemanticAnalyzer finds are in use" />
      <item value="clear CurrentFunctionsInUse set, to capture new set of functions // that SemanticAnalyzer finds are in use" />
      <item value="Enumerate numLevels of ancestors by putting them in the stack and dispatch * the current node. * * @param nd current operator in the ancestor tree * @param level how many level of ancestors included in the stack * @param stack operator stack * @throws SemanticException" />
      <item value="walk" />
      <item value="// We did not create the table before moving the data files for a non-partitioned table i.e // we used load file instead of load table (see SemanticAnalyzer#getFileSinkPlan() for // more details). Thus could not add a write notification required for a transactional // table. Do that here, after we have created the table. Since this is a newly created // table, listing all the files in the directory and listing only the ones corresponding to // the given id doesn't have much difference." />
      <item value="Any changes you make to this file will be ignored by Hive" />
      <item value="This file is auto generated for documentation purposes ONLY" />
      <item value="Comma-separated list of post-execution hooks to be invoked for each statement. A post-execution hook is specified as the name of a Java class which implements the org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext interface." />
      <item value="Internal" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="239" />
        <entry key="ENGLISH" value="240" />
        <entry key="DUTCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>