<application>
  <component name="AppStorage">
    <histories>
      <item value="Identify and stop the process that's listening on port 8761 or configure this application to listen on another port." />
      <item value="destination" />
      <item value="A map from a final select operator id to the select operator * and the corresponding target table in case an insert into query." />
      <item value="A map from a final select operator id to the select operator * and the corresponding target table in case an insert into query" />
      <item value="A map from operator to the conditions strings." />
      <item value="ALLSCOPE EXCEPT COLUMN" />
      <item value="Generate normalized name for a given target column" />
      <item value="Unable to fetch table" />
      <item value="Write the status of tables to a file." />
      <item value="Find whether the current query is a logical explain query" />
      <item value="Either list of columns or a custom serializer should be specified" />
      <item value="gen File Sink Plan" />
      <item value="Go over all the destination tables" />
      <item value="Constructs a standard group by plan if: // There is no other subquery with the same group by/distinct keys or // (There are no aggregations in a representative query for the group and // There is no group by in that representative query) or // The data is skewed or // The conf variable used to control combining group bys into a single reducer is false" />
      <item value="There is no other subquery with the same group by/distinct keys or" />
      <item value="Constructs a standard group by plan if:" />
      <item value="Iterate over each group of subqueries with the same group by/distinct keys" />
      <item value="If we can put multiple group bys in a single reducer, determine suitable groups of // expressions, otherwise treat all the expressions as a single group" />
      <item value="partitioned table functions" />
      <item value="After processing subqueries and source tables, process" />
      <item value="Recurse over all the source tables" />
      <item value="Recurse over the subqueries to fill the subquery part of the plan" />
      <item value="First generate all the opInfos for the elements in the from clause" />
      <item value="then" />
      <item value="Check for dynamic partitions" />
      <item value="Method invoked when the given thread terminates due to the * given uncaught exception. * &lt;p&gt;Any exception thrown by this method will be ignored by the * Java Virtual Machine. * @param t the thread * @param e the exception */" />
      <item value="When init(true) combine with genResolvedParseTree, it will generate Resolved Parse tree from syntax tree //ReadEntity created under these conditions should be all relevant to the syntax tree even the ones without parents //set mergeIsDirect to true here" />
      <item value="Implementation of the semantic analyzer. It generates the query plan. * There are other specific semantic analyzers for some hive operations such as * DDLSemanticAnalyzer for ddl operations." />
      <item value="cascade only occurs with partitioned table" />
      <item value="Generate normalized name for a given target column." />
      <item value="A mapping from a tableName to a table object in metastore." />
      <item value="used to capture view to SQ conversions. This is used to check for * recursive CTE invocations" />
      <item value="Keep track of view alias to view name and read entity" />
      <item value="We have to materialize the table alias list since we might // modify it in the middle for view rewrite." />
      <item value="Go over the tables and populate the related structures" />
      <item value="Go through each target column, generate the lineage edges" />
      <item value="Dynamic partition keys should be added to field schemas" />
      <item value="Based on the plan outputs, find out the target table name and column names" />
      <item value="Optimizer" />
      <item value="resultSchema will be null if // (1) cbo is disabled; // (2) or cbo is enabled with AST return path (whether succeeded or not, // resultSchema will be re-initialized) // It will only be not null if cbo is enabled with new return path and it // succeeds." />
      <item value="Check query results cache // In the case that row or column masking/filtering was required, we do not support caching. // TODO: Enable caching for queries with masking/filtering" />
      <item value="Generate column access stats if required - wait until column pruning // takes place during optimization" />
      <item value="Generate Parse Context for Optimizer &amp; Physical compiler" />
      <item value="Set the semijoin hints in parse context" />
      <item value="Perform Logical optimization" />
      <item value="if any filters are present in the join tree, push them on top of the // table" />
      <item value="if there is only one destination in Query try to push where predicates * as Join conditions" />
      <item value="initialize FetchTask right here" />
      <item value="Some initial checks for a query to see if we can look this query up in the results cache." />
      <item value="If we use CBO and we may apply masking/filtering policies, we create a copy of the ast. // The reason is that the generation of the operator tree may modify the initial ast, // but if we need to parse for a second time, we would like to parse the unmodified ast" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="452" />
        <entry key="ENGLISH" value="453" />
        <entry key="DUTCH" value="6" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>