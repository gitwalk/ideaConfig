<application>
  <component name="AppStorage">
    <histories>
      <item value="ExecuteWithHookContext is a new interface that the Pre/Post Execute Hook can run with the HookContext" />
      <item value="Based on the plan outputs, find out the target table name and column names" />
      <item value="Subclasses" />
      <item value="classLoader the class loader to create the proxy with" />
      <item value="Create a new proxy according to the settings in this factory. * &lt;p&gt;Can be called repeatedly. Effect will vary if we've added * or removed interfaces. Can add and remove interceptors. * &lt;p&gt;Uses the given class loader (if necessary for proxy creation)." />
      <item value="Uses the given class loader (if necessary for proxy creation)" />
      <item value="Can add and remove interceptors" />
      <item value="Effect will vary if we've added * or removed interfaces." />
      <item value="Can be called repeatedly" />
      <item value="the cache key for metadata access" />
      <item value="the raw bean instance" />
      <item value="Wrap the given bean if necessary, i.e. if it is eligible for being proxied" />
      <item value="Create a proxy with the configured interceptors if the bean is * identified as one to proxy by the subclass." />
      <item value="initialize Bean" />
      <item value="Make sure bean class is actually resolved at this point" />
      <item value="Give BeanPostProcessors a chance to return a proxy instead of the target bean instance" />
      <item value="// Make sure bean class is actually resolved at this point, and // clone the bean definition in case of a dynamically resolved Class // which cannot be stored in the shared merged bean definition." />
      <item value="Check if required type matches the type of the actual bean instance" />
      <item value="While this may not be part of the regular factory bootstrap, it does otherwise work fine" />
      <item value="Iterate over a copy to allow for init methods which in turn register new bean definitions" />
      <item value="Instantiate all remaining (non-lazy-init) singletons" />
      <item value="// Register a default embedded value resolver if no bean post-processor // (such as a PropertyPlaceholderConfigurer bean) registered any before: // at this point, primarily for resolution in annotation attribute values." />
      <item value="Allows post-processing of the bean factory in context subclasses." />
      <item value="Register bean processors that intercept bean creation" />
      <item value="// Register BeanPostProcessorChecker that logs an info message when // a bean is created during BeanPostProcessor instantiation, i.e. when // a bean is not eligible for getting processed by all BeanPostProcessors." />
      <item value="separator" />
      <item value="Initialization" />
      <item value="1. `spring-core` and `spring-oxm` should be pre-compiled due to repackaged dependencies. See `*RepackJar` tasks in the build and https://youtrack.jetbrains.com/issue/IDEA-160605). 2. `spring-aspects` does not compile due to references to aspect types unknown to IntelliJ IDEA. See https://youtrack.jetbrains.com/issue/IDEA-64446 for details. In the meantime, the 'spring-aspects' can be excluded from the project to avoid compilation errors. 3. While JUnit tests pass from the command line with Gradle, some may fail when run from IntelliJ IDEA. Resolving this is a work in progress. If attempting to run all JUnit tests from within IntelliJ IDEA, you will likely need to set the following VM options to avoid out of memory errors: -XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m 4. If you invoke &quot;Rebuild Project&quot; in the IDE, you'll have to generate some test resources of the `spring-oxm` module again (`./gradlew :spring-oxm:compileTestJava`)" />
      <item value="Navigate" />
      <item value="When prompted exclude the `spring-aspects` module (or after the import via File-&gt; Project Structure -&gt; Modules) 4. Code away" />
      <item value="CREDENTIALS" />
      <item value="/** * Used to dereference a {@link FactoryBean} instance and distinguish it from * beans &lt;i&gt;created&lt;/i&gt; by the FactoryBean. For example, if the bean named * {@code myJndiObject} is a FactoryBean, getting {@code &amp;myJndiObject} * will return the factory, not the instance returned by the factory. */" />
      <item value="Mapped Statements collection does not contain value for com.bupt.cad.metadataserver.dao.DictionaryDao.findByDictCode" />
      <item value="The Web UI provides navigation between the bits of information and the ability to annotate the collected data with comments, ownership and more. The example below is for collecting Hive metadata collected from the Cloudera Hadoop VM Wherehows comes in three operational components: - [Backend service](../wherehows-backend/README.md) - **A web-ui service** - Database schema for MySQL" />
      <item value="return all declared fields of the class, exclude inherited fields" />
      <item value="stagging table for dataset" />
      <item value="/** * The DataOriginView class is used to find our dataset data origin. Previously, the values EI, CORP, and PROD * were hardcoded into the frontend UI, but users actually wanted even more information about the cluster the * data lives on (e.g. Holdem, War). */" />
      <item value="Lineage" />
      <item value="Get downstream datasets lineage for a certain dataset, similar to downstream datasets but with * lineage data attached" />
      <item value="Causes the current thread to wait, if necessary, until the * process represented by this {@code Process} object has * terminated. This method returns immediately if the subprocess * has already terminated. If the subprocess has not yet * terminated, the calling thread will be blocked until the * subprocess exits. * * @return the exit value of the subprocess represented by this * {@code Process} object. By convention, the value * {@code 0} indicates normal termination. * @throws InterruptedException if the current thread is * {@linkplain Thread#interrupt() interrupted} by another * thread while it is waiting, then the wait is ended and * an {@link InterruptedException} is thrown. */" />
      <item value="indicates if this part is the leftmost in the range" />
      <item value="/** * Sorts the specified range of the array using the given * workspace array slice if possible for merging * * @param a the array to be sorted * @param left the index of the first element, inclusive, to be sorted * @param right the index of the last element, inclusive, to be sorted * @param work a workspace array (slice) * @param workBase origin of usable space in work array * @param workLen usable size of work array */" />
      <item value="* Adapter no-op implementation - does nothing and returns immediately. * * @param session the session that has expired." />
      <item value="/** * Adapter no-op implementation - does nothing and returns immediately. * * @param session the session that has stopped." />
      <item value="Simple adapter implementation of the {@link SessionListener} interface, effectively providing * no-op implementations of all methods. *" />
      <item value="* Retrieves the Session object from the underlying EIS identified by &lt;tt&gt;sessionId&lt;/tt&gt; by delegating to * the {@link #doReadSession(java.io.Serializable)} method. If {@code null} is returned from that method, an * {@link UnknownSessionException} will be thrown. * * @param sessionId the id of the session to retrieve from the EIS. * @return the session identified by &lt;tt&gt;sessionId&lt;/tt&gt; in the EIS. * @throws UnknownSessionException if the id specified does not correspond to any session in the EIS. */" />
      <item value="/** * Get the value of {@code key}. * * @param key must not be {@literal null}. * @return {@literal null} when used in pipeline / transaction. * @see &lt;a href=&quot;http://redis.io/commands/get&quot;&gt;Redis Documentation: GET&lt;/a&gt; */" />
      <item value="/** * Retrieves the session from the EIS uniquely identified by the specified * {@code sessionId}. * * @param sessionId the system-wide unique identifier of the Session object to retrieve from * the EIS. * @return the persisted session in the EIS identified by {@code sessionId}. * @throws UnknownSessionException if there is no EIS record for any session with the * specified {@code sessionId} */" />
      <item value="DEPARTMENT" />
      <item value="/** * Asserts this Subject has the specified role by returning quietly if they do or throwing an * {@link org.apache.shiro.authz.AuthorizationException} if they do not. * * @param roleIdentifier the application-specific role identifier (usually a role id or role name ). * @throws org.apache.shiro.authz.AuthorizationException * if this Subject does not have the role. */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="149" />
        <entry key="ENGLISH" value="150" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>